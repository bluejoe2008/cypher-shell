version = buildVersion

task generateBuildProperties {
  def outputDir = file("${buildDir}/resources/main")
  doFirst {
    outputDir.exists() || outputDir.mkdirs()
    def propFile = new File(outputDir, "build.properties")
    def props = new Properties()
    props.setProperty("version", buildVersion)
    props.setProperty("driverVersion", neo4jJavaDriverVersion)
    props.store(propFile.newWriter(), null)
  }
}

processResources.finalizedBy generateBuildProperties

jar {
  manifest {
    attributes 'Main-Class': 'org.neo4j.shell.Main'
  }
}

shadowJar {
  // Insure no version number is included in jar name
  version = null
}

distributions {
  main {
    baseName = 'cypher-shell'
    contents {
      from {'src/dist'}
      from shadowJar
    }
  }
}

// 源码包
task sourceJar(type: Jar) {
    from sourceSets.main.allJava
    classifier "sources"
}

//maven-publish 扩展名
publishing {
    // 配置发布的项目信息
    publications{
        library(MavenPublication){
            // MavenPublication 中有一些属性，主要包括groupId，artifactId，version,from,artifact
            // 其中groupId，artifactId，version，artifact都是选填的，不填默认去取项目的相关信息；
            groupId project.group // 项目的group
            artifactId 'test-'+project.name //项目name
            version project.version
            //如果打成war包填写components.web，如果打成jar包填写components.java
            from components.java
            artifact sourceJar
        }
    }
    // 配置发布的地址
    repositories{
        maven{
            // 私服地址
            url = 'http://10.0.82.220:8081/repository/maven-snapshots/'
            // 验证信息
            credentials{
                // 私服的用户与密码
                username 'admin'
                password 'bigdata@123'
            }
        }
    }
}

dependencies {
    compile "net.sourceforge.argparse4j:argparse4j:$argparse4jVersion"
    compile "org.neo4j:neo4j-cypher-expression-evaluator:$evaluatorVersion"
    compile "org.neo4j.driver:neo4j-java-driver:$neo4jJavaDriverVersion"
    compileOnly "com.google.code.findbugs:annotations:$findbugsVersion"
    compile "org.fusesource.jansi:jansi:$jansiVersion"
    compile("jline:jline:$jlineVersion") {
        exclude(group: 'junit', module: 'junit')
    }
    testCompile "junit:junit:$junitVersion"
    testCompile "org.mockito:mockito-core:$mockitoVersion"
    testCompile "com.github.stefanbirkner:system-rules:$systemRulesVersion"
    testCompileOnly "com.google.code.findbugs:annotations:$findbugsVersion"
}
